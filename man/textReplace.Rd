% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/textReplace.R
\name{textReplace}
\alias{textReplace}
\title{Detect texts marked by keywords in the doc and replace them with dynamic text & numbers.}
\usage{
textReplace(
  doc_object = NULL,
  keyword = "TTsomethingTT",
  replacement = NULL,
  return_to_file = NULL
)
}
\arguments{
\item{replacement}{The text that you want to insert at the keyword position.}

\item{doc_ojbect}{Can be either a string or officer object. If string, a path to the folder where your doc or docx is saved. If officer object, should be the doc/docx loaded by officer::read_docx()}

\item{path_docx}{Path to the folder where your target docx is saved.}
}
\value{
officer object or writing to files instead
}
\description{
This function takes a docx template file (e.g. TLR shell with keywords like "TTsubjectTT"), and replace them with texts dynamically generated by user's R code.
}
\examples{
# By default, not returning to file, pass the officer object to the next function one by one
outTLR = textReplace(
            doc_object = "C:/Documents/TLR/your_shell.docx",
            keyword = "TTsubjectTT",
            replacement = "This is new text"
            )
outTLR = textReplace(
            doc_object = outTLR,
            keyword = "TTsomethingTT",
            replacement = "Some new text"
            )
# In fact you can even use dplyr's function chains

...
# In the end, when you are done replacing texts, you can write to file
textReplace(
            doc_object = outTLR,
            keyword = "TTsomethingelseTT",
            replacement = "New texts",
            return_to_file = "C:/Documents/TLR/your_shell_replaced.docx"
            )

# or you can write to file manually using officer
print( outTLR,  "C:/Documents/TLR/your_shell_replaced.docx" )

# You can use R's built-in or dplyr's function chains to chain your functions
textReplace(
            doc_object = file.path(path_docx, "TLR_shell.docx"),
            keyword = "TTsubjectTT",
            replacement = "This is new text")  |>
  textReplace(keyword = "TTsomethingTT", replacement = "This is new text 2") |>
  textReplace(keyword = "TTsomething2TT", replacement = "This is new text 3") |>
  textReplace(keyword = "TTsomethingelseTT", replacement = "This is some final new text",
              return_to_file = file.path(path_docx, "TLR_shell_replacedtexts.docx"))

# See help(run_apdx) or Github landing page for additional details..
}
